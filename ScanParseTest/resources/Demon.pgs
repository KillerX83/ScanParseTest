#for I=1 to KNOD
     #for J=1 to KNOD
        INITIAL   MX$DISTR(&I,&J),&PROB(I,J)
     #next J
#next I 
#read KNOD
#def  TARR(KNOD) real, TSERV(KNOD) real, STOR(KNOD) int, PROB(KNOD,KNOD) real
#read TARR
#read TSERV
#read STOR
#read PROB
MONE  EQU       -1
DISTR   MATRIX    ,&KNOD,&KNOD
#for I=1 to KNOD
     #for J=1 to KNOD
        INITIAL   MX$DISTR(&I,&J),&PROB(I,J)
     #next J
#next I 


IATR    FUNCTION  P$NODE,L&KNOD
#for I=1 to KNOD
&I,&TARR(I)
#next I
TSERV   FUNCTION  P$NODE,L&KNOD
#for I=1 to KNOD
&I,&TSERV(I)
#next I
#for I=1 to KNOD
SERV&I EQU        &I
SERV&I STORAGE    &STOR(I)
#next I
       GENERATE	  ,,,1,1
       ASSIGN	  ROW,&KNOD
CIKL1  ASSIGN	  SUM,0
       ASSIGN	  NCOL,&KNOD
CIKL2  ASSIGN	  COL,(&KNOD+1-P$NCOL)
       ASSIGN	  SUM+,MX$DISTR(P$ROW,P$COL)
       MSAVEVALUE DISTR,P$ROW,P$COL,P$SUM
       LOOP	  NCOL,CIKL2
       LOOP	  ROW,CIKL1	      
       TERMINATE	  
       GENERATE   ,,,1
       ASSIGN     NODE,MONE
       SPLIT      &KNOD,ENT1,NODE
       TERMINATE
ENT1   ASSIGN     TARR,FN$IATR
       TEST E     P$TARR,0,ENT2
       TERMINATE
ENT2   ADVANCE    (Exponential(1,0,P$TARR))
       SPLIT      1,ENT2
       QUEUE      NETW
ENT3   QUEUE      P$NODE
       ENTER      P$NODE
       DEPART     P$NODE
       ADVANCE    (Exponential(1,0,FN$TSERV))
       LEAVE      P$NODE
       SAVEVALUE  RAND,(RN1/1000)
       ASSIGN     NCOL,&KNOD
CIKL3  ASSIGN     COL,(&KNOD+1-P$NCOL)
       TEST LE    X$RAND,MX$DISTR(P$NODE,P$COL),ENDC
       ASSIGN     NODE,P$COL
       TRANSFER   ,ENT3
ENDC   LOOP	  NCOL,CIKL3
       DEPART     NETW
       TEST E     TG1,1,TERM1
       OPEN	  ("C:\Users\Lev\Desktop\Demon.res"),,FCLOSE
#for I=1 to KNOD
       WRITE      (Round(SR&I/1000,3)),,FCLOSE
       WRITE      (Round(QT&I,3)),,FCLOSE
#next I
       WRITE      (Round(QT$NETW,3)),,FCLOSE
       WRITE	  (Round(QA$NETW,3)),,FCLOSE
       WRITE	  (Round(QM$NETW,3)),,FCLOSE
FCLOSE CLOSE	  ERR
       TEST E	  P$ERR,0,ERROR
TERM1  TERMINATE  1
ERROR  TERMINATE  1
       START      &LENGTH,NP
       EXIT	  -1
PROCEDURE Round(Number,Precision) BEGIN
       TEMPORARY StrNum,Point,RoundNum,NumDig;
       IF (Number=0) THEN RETURN "0";
       StrNum = String(Number);
       Point = Find(".",StrNum);
       IF (Point > 0) THEN BEGIN
	RoundNum = Abs(Number)+0.5#10^(-Precision);
	IF (Number < 0) THEN RoundNum = -RoundNum;
          IF (Precision=0) THEN NumDig = Point-1;
          ELSE NumDig = Point+Precision;
	StrNum = Left(String(RoundNum),NumDig);
       END;
       RETURN StrNum;
END;


